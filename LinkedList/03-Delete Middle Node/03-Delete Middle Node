class CreateNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        
    def end(self, data):
        new = CreateNode(data)
        if self.head is None:
            self.head = new
        else:
            n = self.head 
            while n.next is not None:
                n = n.next
            n.next = new

    def printlist(self):
        if self.head is None:
            print("Empty")
        else:
            n = self.head
            while n is not None:
                print(n.data, end=" -> " if n.next else "\n")
                n = n.next

    def delete_middle_node(self, node):
        if node is None or node.next is None:
            raise Exception("Cannot delete this node using this method")
        
        next_node = node.next
        node.data = next_node.data  # Copy the data from the next node
        node.next = next_node.next  # Bypass the next node


# Example usage
ll = LinkedList()
ll.end(10)
ll.end(30)
ll.end(40)
ll.end(20)

# Let's say we want to delete the node with value 40
# We need to find the node with value 40 in the linked list
current = ll.head
while current is not None:
    if current.data == 40:
        middle_node = current
        break
    current = current.next

print("Original list:")
ll.printlist()

# Delete the middle node (node with value 40)
ll.delete_middle_node(middle_node)

print("\nList after deleting the middle node:")
ll.printlist()
